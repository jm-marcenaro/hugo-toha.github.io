<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Juan's Blog</title><link>https://hugo-toha.github.io/posts/</link><description>Recent content in Posts on Juan's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 27 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://hugo-toha.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Calculate slopes from a DEM using GDAL and Python</title><link>https://hugo-toha.github.io/posts/gdal/gdal_1/</link><pubDate>Fri, 27 Sep 2024 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/posts/gdal/gdal_1/</guid><description>&lt;h2 id="project-overview">Project Overview&lt;/h2>
&lt;p>In this post, we&amp;rsquo;ll explore the capabilities of GDAL tools alongside Python to automate the process and calculate the mean slope of multiple basins from a Digital Elevation Model (DEM).&lt;/p>
&lt;p>To begin with, we&amp;rsquo;ll need to set up an Anaconda environment with GDAL installed in it. I strongly recommend following the steps detailed in this &lt;a href="https://courses.spatialthoughts.com/gdal-tools.html#setting-up-the-environment" target="_blank" rel="noopener">tutorial.&lt;/a>&lt;/p>
&lt;p>The project is reproducible and available on my (Github repository)[https://github.com/jm-marcenaro/Personal-blog-posts], feel free to visit!&lt;/p></description></item><item><title>GOES Visualizer</title><link>https://hugo-toha.github.io/posts/nodejs/nodejs_2/</link><pubDate>Fri, 27 Sep 2024 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/posts/nodejs/nodejs_2/</guid><description>&lt;h2 id="project-overview">Project Overview&lt;/h2>
&lt;p>In this opportunity we&amp;rsquo;ll go over a project developed through the combination of Google Earth Engine and Node.js once again. Data we&amp;rsquo;ll be retrieved and processed through GEE Python API and afterwards served to a local website interface using Node.js&lt;/p>
&lt;p>We’ll walk through:&lt;/p>
&lt;ul>
&lt;li>Retrieving and processing data from Google Earth Engine using Python,&lt;/li>
&lt;li>serving this data through a local Node.js server and,&lt;/li>
&lt;li>building a responsive dashboard for data visualization.&lt;/li>
&lt;/ul>
&lt;p>By the end of this project, you’ll learn how to integrate these powerful tools to visualize complex geospatial datasets in real time. The project is reproducible and available on my &lt;a href="https://github.com/jm-marcenaro/Visualizador-GOES" target="_blank" rel="noopener">Github repository&lt;/a> so you can follow along.&lt;/p></description></item><item><title>GFS Dashboard</title><link>https://hugo-toha.github.io/posts/nodejs/nodejs_1/</link><pubDate>Thu, 26 Sep 2024 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/posts/nodejs/nodejs_1/</guid><description>&lt;h2 id="project-overview">Project Overview&lt;/h2>
&lt;p>In this opportunity we&amp;rsquo;ll go over a project developed through the combination of Google Earth Engine and Node.js. Data we&amp;rsquo;ll be retrieved and processed through GEE Python API and afterwards served to a local dashboard using Node.js&lt;/p>
&lt;p>We’ll walk through:&lt;/p>
&lt;ul>
&lt;li>Retrieving and processing data from Google Earth Engine using Python,&lt;/li>
&lt;li>serving this data through a local Node.js server and,&lt;/li>
&lt;li>building a responsive dashboard for data visualization.&lt;/li>
&lt;/ul>
&lt;p>By the end of this project, you’ll learn how to integrate these powerful tools to visualize complex geospatial datasets in real time. The project is reproducible and available on my &lt;a href="https://github.com/jm-marcenaro/GFS-Dashboard" target="_blank" rel="noopener">Github repository&lt;/a> so you can follow along.&lt;/p></description></item><item><title>GEE Python API: NDVI, precipitation and real evapotranspiration</title><link>https://hugo-toha.github.io/posts/gee/ndvi-ppt-etr/ndvi-ppt-etr_1/</link><pubDate>Mon, 02 Sep 2024 08:06:25 +0600</pubDate><guid>https://hugo-toha.github.io/posts/gee/ndvi-ppt-etr/ndvi-ppt-etr_1/</guid><description>&lt;h3 id="project-overview">Project Overview&lt;/h3>
&lt;p>In this post, we&amp;rsquo;ll explore the correlation between multiple environmental data variables using the Google Earth Engine (GEE) Python API. Specifically, we&amp;rsquo;ll analyze yearly aggregated Normalized Difference Vegetation Index (NDVI), precipitation, and real evapotranspiration (ETr) over a region of interest spanning approximately 5,000 km² and over a five-year period (2019-2023).&lt;/p>
&lt;ul>
&lt;li>NDVI data will be extracted from the Sentinel-2 satellites.&lt;/li>
&lt;li>Precipitation data will be sourced from the CHIRPS dataset.&lt;/li>
&lt;li>Real evapotranspiration (ETr) data will be obtained from the MODIS satellite.&lt;/li>
&lt;/ul>
&lt;p>To make this project reproducible, you can access all the code from my &lt;a href="https://github.com/jm-marcenaro/GEE-Python-API-NDVI-PPT-ETR" target="_blank" rel="noopener">GitHub repository&lt;/a>. Feel free to check it out, try the code yourself, and leave comments or suggestions.&lt;/p></description></item><item><title>QGIS: Batch Processing</title><link>https://hugo-toha.github.io/posts/qgis/qgis_1/</link><pubDate>Tue, 20 Aug 2024 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/posts/qgis/qgis_1/</guid><description>&lt;h2 id="project-overview">Project Overview&lt;/h2>
&lt;p>In this tutorial, we&amp;rsquo;ll explore the capabilities of batch processing in QGIS. Batch processing is incredibly helpful for repetitive tasks that can otherwise consume a lot of time and effort. By automating these tasks, you can focus on more important aspects of your project, increasing both efficiency and productivity.&lt;/p>
&lt;p>Let me set up an example where we&amp;rsquo;ll fully leverage the power of batch processing in QGIS.&lt;/p>
&lt;h2 id="case-example">Case Example&lt;/h2>
&lt;p>We&amp;rsquo;ve got a set of 12 MODIS land surface temperature (LST) images for an area of interest. These images are in Kelvin degrees, but before we can perform our analysis in Celsius, we need to first scale the temperature values by a factor of 0.02. After scaling, we&amp;rsquo;ll convert the temperatures from Kelvin to Celsius by subtracting 273.&lt;/p></description></item><item><title>GEE Python API and CHIRPS: Analyzing precipitation in Buenos Aires - Part 2</title><link>https://hugo-toha.github.io/posts/gee/chirps/chirps_2/</link><pubDate>Thu, 15 Aug 2024 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/posts/gee/chirps/chirps_2/</guid><description>&lt;h3 id="project-overview">Project Overview&lt;/h3>
&lt;p>In this post, we continue our exploration of the 2023 severe drought in Buenos Aires province, Argentina. In our previous post, we used the CHIRPS dataset to analyze the extent and impact of the drought. Now, we’ll take our analysis a step further by extracting time series data from specific coordinates within the affected region.&lt;/p>
&lt;p>To ensure that you can follow along and reproduce the results, all the code used in this analysis is available in my &lt;a href="https://github.com/jm-marcenaro/GEE-Python-API-CHIRPS" target="_blank" rel="noopener">GitHub repository&lt;/a>.&lt;/p></description></item><item><title>GEE Python API and CHIRPS: Analyzing precipitation in Buenos Aires - Part 1</title><link>https://hugo-toha.github.io/posts/gee/chirps/chirps_1/</link><pubDate>Tue, 30 Jul 2024 08:06:25 +0600</pubDate><guid>https://hugo-toha.github.io/posts/gee/chirps/chirps_1/</guid><description>&lt;h3 id="project-overview">Project Overview&lt;/h3>
&lt;p>Welcome back! In this post, we&amp;rsquo;ll delve into the severe drought that affected Buenos Aires Province in Argentina, in 2023, using the CHIRPS dataset and the Google Earth Engine (GEE) Python API.&lt;/p>
&lt;p>As detailed in the &lt;a href="https://developers.google.com/earth-engine/datasets/catalog/UCSB-CHG_CHIRPS_DAILY" target="_blank" rel="noopener">GEE catalog&lt;/a>, CHIRPS—short for Climate Hazards Group InfraRed Precipitation with Station data—is a 30+ year quasi-global rainfall dataset. This dataset integrates satellite imagery with in-situ station data at a 0.05° resolution to generate gridded rainfall at daily temporal resolution. This dataset is invaluable for trend analysis and seasonal drought monitoring.&lt;/p></description></item><item><title>GEE Python API and Precipitation Forecasting - Part 2</title><link>https://hugo-toha.github.io/posts/gee/gfs/gfs_2/</link><pubDate>Thu, 25 Jul 2024 08:06:25 +0600</pubDate><guid>https://hugo-toha.github.io/posts/gee/gfs/gfs_2/</guid><description>&lt;h3 id="project-overview">Project Overview&lt;/h3>
&lt;p>Hello again! Welcome to the continuation of our deep dive into precipitation forecasting using the GFS dataset and the GEE Python API. In our previous post, we demonstrated how to use the GEE Python API along with the XEE library (an integration of GEE and xarray) to forecast precipitation for specific coordinates. This time, we’re going to expand our analysis to cover an entire region. Besides, we&amp;rsquo;ll leverage additional libraries such as Geopandas and Cartopy to create comprehensive spatial maps of precipitation forecasts.&lt;/p></description></item><item><title>GEE Python API and Precipitation Forecasting - Part 1</title><link>https://hugo-toha.github.io/posts/gee/gfs/gfs_1/</link><pubDate>Mon, 15 Jul 2024 08:06:25 +0600</pubDate><guid>https://hugo-toha.github.io/posts/gee/gfs/gfs_1/</guid><description>&lt;h3 id="project-overview">Project Overview&lt;/h3>
&lt;p>Greetings! Welcome to the first part of a deep dive into Google Earth Engine (GEE) and its Python API. In this series, we&amp;rsquo;ll explore how to leverage the power of GEE for geospatial analysis, focusing on precipitation forecasting using the &lt;strong>Global Forecast System&lt;/strong> (GFS) dataset.&lt;/p>
&lt;p>GFS is a widely-used weather forecast model developed by NOAA. It provides comprehensive weather data, including temperature, wind, and precipitation forecasts, on a global scale. The model delivers forecasts up to 16 days into the future, making it an invaluable tool for a wide range of applications.&lt;/p></description></item></channel></rss>